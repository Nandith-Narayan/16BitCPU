// Generated from java-escape by ANTLR 4.11.1
package parser;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class AssemblyLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, OPCODE_SIMPLE=7, OPCODE_COMPOUND=8, 
		SPACE=9, DECIMAL_LITERAL=10, HEX_LITERAL=11, BINARY_LITERAL=12, IDENTIFIER=13, 
		NEWLINE=14, WS=15;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "OPCODE_SIMPLE", "OPCODE_COMPOUND", 
			"SPACE", "DECIMAL_LITERAL", "HEX_LITERAL", "BINARY_LITERAL", "IDENTIFIER", 
			"NEWLINE", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'\\t'", "'$'", "':'", "'const'", "'='", "'var'", null, null, "' '"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, "OPCODE_SIMPLE", "OPCODE_COMPOUND", 
			"SPACE", "DECIMAL_LITERAL", "HEX_LITERAL", "BINARY_LITERAL", "IDENTIFIER", 
			"NEWLINE", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public AssemblyLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Assembly.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u000f\u00b3\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0003\u0006P\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0003\u0007\u0081\b\u0007\u0001\b\u0001\b\u0001\t\u0001\t"+
		"\u0003\t\u0087\b\t\u0001\t\u0001\t\u0005\t\u008b\b\t\n\t\f\t\u008e\t\t"+
		"\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0005\n\u0095\b\n\n\n\f\n\u0098"+
		"\t\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0005"+
		"\u000b\u009f\b\u000b\n\u000b\f\u000b\u00a2\t\u000b\u0001\f\u0001\f\u0005"+
		"\f\u00a6\b\f\n\f\f\f\u00a9\t\f\u0001\r\u0003\r\u00ac\b\r\u0001\r\u0001"+
		"\r\u0003\r\u00b0\b\r\u0001\u000e\u0001\u000e\u0000\u0000\u000f\u0001\u0001"+
		"\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005\u000b\u0006\r\u0007\u000f"+
		"\b\u0011\t\u0013\n\u0015\u000b\u0017\f\u0019\r\u001b\u000e\u001d\u000f"+
		"\u0001\u0000\t\u0001\u000009\u0002\u000009__\u0003\u000009AFaf\u0004\u0000"+
		"09AF__af\u0001\u000001\u0002\u000001__\u0003\u0000AZ__az\u0004\u00000"+
		"9AZ__az\u0002\u0000\t\t  \u00cf\u0000\u0001\u0001\u0000\u0000\u0000\u0000"+
		"\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000"+
		"\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b"+
		"\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001"+
		"\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013\u0001"+
		"\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0017\u0001"+
		"\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u001b\u0001"+
		"\u0000\u0000\u0000\u0000\u001d\u0001\u0000\u0000\u0000\u0001\u001f\u0001"+
		"\u0000\u0000\u0000\u0003!\u0001\u0000\u0000\u0000\u0005#\u0001\u0000\u0000"+
		"\u0000\u0007%\u0001\u0000\u0000\u0000\t+\u0001\u0000\u0000\u0000\u000b"+
		"-\u0001\u0000\u0000\u0000\rO\u0001\u0000\u0000\u0000\u000f\u0080\u0001"+
		"\u0000\u0000\u0000\u0011\u0082\u0001\u0000\u0000\u0000\u0013\u0086\u0001"+
		"\u0000\u0000\u0000\u0015\u008f\u0001\u0000\u0000\u0000\u0017\u0099\u0001"+
		"\u0000\u0000\u0000\u0019\u00a3\u0001\u0000\u0000\u0000\u001b\u00af\u0001"+
		"\u0000\u0000\u0000\u001d\u00b1\u0001\u0000\u0000\u0000\u001f \u0005\t"+
		"\u0000\u0000 \u0002\u0001\u0000\u0000\u0000!\"\u0005$\u0000\u0000\"\u0004"+
		"\u0001\u0000\u0000\u0000#$\u0005:\u0000\u0000$\u0006\u0001\u0000\u0000"+
		"\u0000%&\u0005c\u0000\u0000&\'\u0005o\u0000\u0000\'(\u0005n\u0000\u0000"+
		"()\u0005s\u0000\u0000)*\u0005t\u0000\u0000*\b\u0001\u0000\u0000\u0000"+
		"+,\u0005=\u0000\u0000,\n\u0001\u0000\u0000\u0000-.\u0005v\u0000\u0000"+
		"./\u0005a\u0000\u0000/0\u0005r\u0000\u00000\f\u0001\u0000\u0000\u0000"+
		"12\u0005N\u0000\u000023\u0005O\u0000\u00003P\u0005P\u0000\u000045\u0005"+
		"A\u0000\u000056\u0005D\u0000\u000067\u0005D\u0000\u00007P\u0005A\u0000"+
		"\u000089\u0005A\u0000\u00009:\u0005D\u0000\u0000:;\u0005D\u0000\u0000"+
		";P\u0005B\u0000\u0000<=\u0005S\u0000\u0000=>\u0005U\u0000\u0000>?\u0005"+
		"B\u0000\u0000?P\u0005A\u0000\u0000@A\u0005S\u0000\u0000AB\u0005U\u0000"+
		"\u0000BC\u0005B\u0000\u0000CP\u0005B\u0000\u0000DE\u0005H\u0000\u0000"+
		"EF\u0005L\u0000\u0000FP\u0005T\u0000\u0000GH\u0005X\u0000\u0000HI\u0005"+
		"O\u0000\u0000IP\u0005R\u0000\u0000JK\u0005A\u0000\u0000KL\u0005N\u0000"+
		"\u0000LP\u0005D\u0000\u0000MN\u0005O\u0000\u0000NP\u0005R\u0000\u0000"+
		"O1\u0001\u0000\u0000\u0000O4\u0001\u0000\u0000\u0000O8\u0001\u0000\u0000"+
		"\u0000O<\u0001\u0000\u0000\u0000O@\u0001\u0000\u0000\u0000OD\u0001\u0000"+
		"\u0000\u0000OG\u0001\u0000\u0000\u0000OJ\u0001\u0000\u0000\u0000OM\u0001"+
		"\u0000\u0000\u0000P\u000e\u0001\u0000\u0000\u0000QR\u0005A\u0000\u0000"+
		"RS\u0005D\u0000\u0000S\u0081\u0005D\u0000\u0000TU\u0005A\u0000\u0000U"+
		"V\u0005D\u0000\u0000VW\u0005D\u0000\u0000W\u0081\u0005I\u0000\u0000XY"+
		"\u0005S\u0000\u0000YZ\u0005U\u0000\u0000Z\u0081\u0005B\u0000\u0000[\\"+
		"\u0005S\u0000\u0000\\]\u0005U\u0000\u0000]^\u0005B\u0000\u0000^\u0081"+
		"\u0005I\u0000\u0000_`\u0005L\u0000\u0000`a\u0005D\u0000\u0000a\u0081\u0005"+
		"A\u0000\u0000bc\u0005L\u0000\u0000cd\u0005D\u0000\u0000de\u0005A\u0000"+
		"\u0000e\u0081\u0005I\u0000\u0000fg\u0005L\u0000\u0000gh\u0005D\u0000\u0000"+
		"h\u0081\u0005B\u0000\u0000ij\u0005L\u0000\u0000jk\u0005D\u0000\u0000k"+
		"l\u0005B\u0000\u0000l\u0081\u0005I\u0000\u0000mn\u0005S\u0000\u0000no"+
		"\u0005T\u0000\u0000o\u0081\u0005A\u0000\u0000pq\u0005S\u0000\u0000qr\u0005"+
		"T\u0000\u0000r\u0081\u0005B\u0000\u0000st\u0005J\u0000\u0000tu\u0005M"+
		"\u0000\u0000u\u0081\u0005P\u0000\u0000vw\u0005J\u0000\u0000w\u0081\u0005"+
		"C\u0000\u0000xy\u0005J\u0000\u0000y\u0081\u0005Z\u0000\u0000z{\u0005J"+
		"\u0000\u0000{|\u0005N\u0000\u0000|\u0081\u0005C\u0000\u0000}~\u0005J\u0000"+
		"\u0000~\u007f\u0005N\u0000\u0000\u007f\u0081\u0005Z\u0000\u0000\u0080"+
		"Q\u0001\u0000\u0000\u0000\u0080T\u0001\u0000\u0000\u0000\u0080X\u0001"+
		"\u0000\u0000\u0000\u0080[\u0001\u0000\u0000\u0000\u0080_\u0001\u0000\u0000"+
		"\u0000\u0080b\u0001\u0000\u0000\u0000\u0080f\u0001\u0000\u0000\u0000\u0080"+
		"i\u0001\u0000\u0000\u0000\u0080m\u0001\u0000\u0000\u0000\u0080p\u0001"+
		"\u0000\u0000\u0000\u0080s\u0001\u0000\u0000\u0000\u0080v\u0001\u0000\u0000"+
		"\u0000\u0080x\u0001\u0000\u0000\u0000\u0080z\u0001\u0000\u0000\u0000\u0080"+
		"}\u0001\u0000\u0000\u0000\u0081\u0010\u0001\u0000\u0000\u0000\u0082\u0083"+
		"\u0005 \u0000\u0000\u0083\u0012\u0001\u0000\u0000\u0000\u0084\u0085\u0005"+
		"0\u0000\u0000\u0085\u0087\u0005d\u0000\u0000\u0086\u0084\u0001\u0000\u0000"+
		"\u0000\u0086\u0087\u0001\u0000\u0000\u0000\u0087\u0088\u0001\u0000\u0000"+
		"\u0000\u0088\u008c\u0007\u0000\u0000\u0000\u0089\u008b\u0007\u0001\u0000"+
		"\u0000\u008a\u0089\u0001\u0000\u0000\u0000\u008b\u008e\u0001\u0000\u0000"+
		"\u0000\u008c\u008a\u0001\u0000\u0000\u0000\u008c\u008d\u0001\u0000\u0000"+
		"\u0000\u008d\u0014\u0001\u0000\u0000\u0000\u008e\u008c\u0001\u0000\u0000"+
		"\u0000\u008f\u0090\u00050\u0000\u0000\u0090\u0091\u0005x\u0000\u0000\u0091"+
		"\u0092\u0001\u0000\u0000\u0000\u0092\u0096\u0007\u0002\u0000\u0000\u0093"+
		"\u0095\u0007\u0003\u0000\u0000\u0094\u0093\u0001\u0000\u0000\u0000\u0095"+
		"\u0098\u0001\u0000\u0000\u0000\u0096\u0094\u0001\u0000\u0000\u0000\u0096"+
		"\u0097\u0001\u0000\u0000\u0000\u0097\u0016\u0001\u0000\u0000\u0000\u0098"+
		"\u0096\u0001\u0000\u0000\u0000\u0099\u009a\u00050\u0000\u0000\u009a\u009b"+
		"\u0005b\u0000\u0000\u009b\u009c\u0001\u0000\u0000\u0000\u009c\u00a0\u0007"+
		"\u0004\u0000\u0000\u009d\u009f\u0007\u0005\u0000\u0000\u009e\u009d\u0001"+
		"\u0000\u0000\u0000\u009f\u00a2\u0001\u0000\u0000\u0000\u00a0\u009e\u0001"+
		"\u0000\u0000\u0000\u00a0\u00a1\u0001\u0000\u0000\u0000\u00a1\u0018\u0001"+
		"\u0000\u0000\u0000\u00a2\u00a0\u0001\u0000\u0000\u0000\u00a3\u00a7\u0007"+
		"\u0006\u0000\u0000\u00a4\u00a6\u0007\u0007\u0000\u0000\u00a5\u00a4\u0001"+
		"\u0000\u0000\u0000\u00a6\u00a9\u0001\u0000\u0000\u0000\u00a7\u00a5\u0001"+
		"\u0000\u0000\u0000\u00a7\u00a8\u0001\u0000\u0000\u0000\u00a8\u001a\u0001"+
		"\u0000\u0000\u0000\u00a9\u00a7\u0001\u0000\u0000\u0000\u00aa\u00ac\u0005"+
		"\r\u0000\u0000\u00ab\u00aa\u0001\u0000\u0000\u0000\u00ab\u00ac\u0001\u0000"+
		"\u0000\u0000\u00ac\u00ad\u0001\u0000\u0000\u0000\u00ad\u00b0\u0005\n\u0000"+
		"\u0000\u00ae\u00b0\u0005\r\u0000\u0000\u00af\u00ab\u0001\u0000\u0000\u0000"+
		"\u00af\u00ae\u0001\u0000\u0000\u0000\u00b0\u001c\u0001\u0000\u0000\u0000"+
		"\u00b1\u00b2\u0007\b\u0000\u0000\u00b2\u001e\u0001\u0000\u0000\u0000\n"+
		"\u0000O\u0080\u0086\u008c\u0096\u00a0\u00a7\u00ab\u00af\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}